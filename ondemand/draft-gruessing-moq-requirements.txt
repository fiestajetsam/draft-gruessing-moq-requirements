



MOQ Mailing List                                            J. Gruessing
Internet-Draft                               Nederlandse Publieke Omroep
Intended status: Informational                                S. Dawkins
Expires: 3 September 2022                            Tencent America LLC
                                                            2 March 2022


              Media Over QUIC - Use cases and Requirements
                draft-gruessing-moq-requirements-latest

Abstract

   This document describes the use cases that have been discussed in the
   IETF community under the banner of "Media Over QUIC", and recommends
   use cases on live media contribution, syndication, and streaming as
   the basis for discussions that should guide the design of protocols
   to satisfy these use cases.

Note to Readers

   _RFC Editor: please remove this section before publication_

   Source code and issues for this draft can be found at
   https://github.com/fiestajetsam/draft-gruessing-moq-requirements
   (https://github.com/fiestajetsam/draft-gruessing-moq-requirements).

   Discussion of this draft should take place on the IETF Media Over
   QUIC (MoQ) mailing list, at https://www.ietf.org/mailman/listinfo/moq
   (https://www.ietf.org/mailman/listinfo/moq).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 3 September 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  For The Impatient Reader
   2.  Terminology
     2.1.  The Many Meanings of "Media Over QUIC"
     2.2.  Media Transport Protoccol
     2.3.  Latency Requirement Categories
   3.  Why QUIC For Media?
   4.  Prior and Existing Specifications
     4.1.  QRT: QUIC RTP Tunnelling
     4.2.  RTP over QUIC
     4.3.  RUSH - Reliable (unreliable) streaming protocol
     4.4.  Tunnelling SRT over QUIC
     4.5.  Warp - Segmented Live Video Transport
     4.6.  Comparison of Existing Specifications
     4.7.  Moving Beyond "RTP over QUIC".
   5.  Use Cases Informing This Proposal
     5.1.  Video Conferencing
     5.2.  Gaming
     5.3.  Remote Desktop
     5.4.  Live Media Streaming
     5.5.  Live Media Contribution
     5.6.  Live Media Syndication
     5.7.  On-Demand Media Streaming
   6.  Proposed Scope for "Media Over QUIC"
     6.1.  Use Case Analysis
   7.  Requirements
     7.1.  Codec Agility
     7.2.  Support a range of Latencies
     7.3.  Migration of Sessions
     7.4.  Congestion Control
     7.5.  Support Lossless and Lossy Media Transport
     7.6.  Flow Directionality
     7.7.  WebTransport
     7.8.  Authentication
   8.  Non-requirements
     8.1.  NAT Traversal
     8.2.  Multicast
   9.  IANA Considerations
   10. Security Considerations
   11. References
     11.1.  Normative References
     11.2.  Informative References
   Appendix A.  Acknowledgements
   Authors' Addresses

1.  Introduction

   This document describes the use cases that have been discussed in the
   IETF community under the banner of "Media Over QUIC", and recommends
   use cases on live media contribution, syndication, and streaming as
   the basis for requirements discussions that should guide the design
   of protocols to satisfy these use cases.

1.1.  For The Impatient Reader

   This document is intended to report a survey of use cases that have
   been discussed under the "Media Over QUIC" banner, and to propose a
   subset of those use cases that should be considered first.  Our
   proposal is in Section 6, our understanding of the requirements for
   those use cases is in Section 7, and most of the rest of the document
   provides background for those sections.

2.  Terminology

2.1.  The Many Meanings of "Media Over QUIC"

   Protocol developers have been considering the implications of the
   QUIC protocol ([RFC9000]) for media transport for several years,
   resulting in a large number of possible meanings of the term "Media
   Over QUIC", or "MOQ".  As of this writing, "Media Over QUIC" has had
   at least these meanings:

   *  any kind of media carried directly over the QUIC protocol, as a
      QUIC payload
   *  any kind of media carried indirectly over the QUIC protocol, as an
      RTP payload ([RFC3550])
   *  any kind of media carried indirectly over the QUIC protocol, as an
      HTTP/3 payload
   *  any kind of media carried indirectly over the QUIC protocol, as a
      WebTransport payload
   *  the encapsulation of any Media Transport Protocol (Section 2.2) in
      a QUIC payload
   *  an IETF mailing list ([MOQ-ml]) "... for discussion of video
      ingest and distribution protocols that use QUIC as the underlying
      transport"

   There may be IETF participants using other meanings as well.

   As of this writing, the second bullet ("any kind of media carried
   indirectly over the QUIC protocol, as an RTP payload"), seems to be
   in scope for the IETF AVTCORE working group, and was discussed at
   some length at the February 2022 AVTCORE working group meeting
   [AVTCORE-2022-02].  So, perhaps, that possible meaning is out of
   scope for "Media over QUIC".

   It will be SUPER HELPFUL if interested parties can come up with a
   term that unambiguously describes what we're trying to achieve.

2.2.  Media Transport Protoccol

   Within this document, we use the term "Media Transport Protocol".
   This is easier to understand if the reader assumes that we are
   starting with a protocol stack that looks like this:

               Media
       ------------------------
       Media Transport Protocol

   and the goal is to provide a protocol stack that looks like this:

               Media
       ------------------------
       Media Transport Protocol
       ------------------------
                QUIC

   Not all of the proposals for "Media Over QUIC" follow this model, but
   for the ones that do, it seems useful to have a name for "the
   protocol layer immediately beneath media".

2.3.  Latency Requirement Categories

   Within this document, we extend the latency requirement categories
   for streaming media described in
   [I-D.draft-ietf-mops-streaming-opcons]:

   *  ultra low-latency (less than 1 second)
   *  low-latency live (less than 10 seconds)
   *  non-low-latency live (10 seconds to a few minutes)
   *  on-demand (hours or more)

   These latency bands were appropriate for streaming media, which was
   the target for [I-D.draft-ietf-mops-streaming-opcons], but some
   realtime media may have requirements that are significantly less than
   "ultra-low latency".  Within this document, we are also using

   *  ull500 (less than 500 ms)
   *  ull100 (less than 100 ms)

   Obviously, these last two latency bands are the shortened form of
   "ultra-low latency - 500 ms" and "ultra-low-latency - 100 ms".  Also
   obviously, bikeshedding on better names is welcomed.

3.  Why QUIC For Media?

   When work on the QUIC protocol ([RFC9000]) was chartered
   ([QUIC-goals]), the key goals for QUIC were:

   *  Minimizing connection establishment and overall transport latency
      for applications, starting with HTTP/2;
   *  Providing multiplexing without head-of-line blocking;
   *  Requiring only changes to path endpoints to enable deployment;
   *  Enabling multipath and forward error correction extensions; and
   *  Providing always-secure transport, using TLS 1.3 by default.

   These goals were chosen with HTTP ([I-D.draft-ietf-quic-http]) in
   mind.

   While work on "QUIC version 1" (version codepoint 0x00000001) was
   underway, protocol designers considered potential advantages of the
   QUIC protocol for other applications.  In addition to the key goals
   for HTTP applications, these advantages were immediately apparent for
   at least some media applications:

   *  QUIC endpoints can create bidirectional or unidirectional ordered
      byte streams.
   *  QUIC will automatically handle congestion control, packet loss,
      and reordering for stream data.
   *  QUIC streams allow multiple media streams to share congestion and
      flow control without otherwise blocking each other.
   *  QUIC streams also allow partial reliability, since either the
      sender or receiver can terminate the stream early without
      affecting the overall connection.
   *  With the DATAGRAM extension ([I-D.draft-ietf-quic-datagram]),
      further partially reliable models are possible, and applications
      can send congestion controlled datagrams below the MTU size.
   *  QUIC connections are established using an ALPN.
   *  QUIC endpoints can choose and change their connection ID.
   *  QUIC endpoints can migrate IP address without breaking the
      connection.
   *  Because QUIC is encapsulated in UDP, QUIC implementations can run
      in user space, rather than in kernel space, as TCP typically does.
      This allows more room for extensible APIs between application and
      transport, allowing more rapid implementation and deployment of
      new congestion control, retransmission, and prioritization
      mechanisms.
   *  QUIC is supported in browsers via HTTP/3 or WebTransport.
   *  With WebTransport, it is possible to write libraries or
      applications in JavaScript.

4.  Prior and Existing Specifications

   *  Note - need to edit this section to reflect new draft scope and
      add short characterization of WARP protocol.

   Several existing draft specifications and protocols already exist
   which base their implementation around using existing Media Transport
   Protocols on top of QUIC, or define their own.  With the exception of
   RUSH (Section 4.3), it is unknown if the other specifications have
   had any deployments or interop with multiple implementations.

4.1.  QRT: QUIC RTP Tunnelling

   [I-D.draft-hurst-quic-rtp-tunnelling]

   QRT encapsulates RTP and RTCP and define the means of using QUIC
   datagrams with them, defining a new payload within a datagram frame
   which distinguishes packets for a RTP packet flow vs RTCP.

4.2.  RTP over QUIC

   [I-D.draft-engelbart-rtp-over-quic]

   This specification also encapsulates RTP and RTCP but unlike QRT
   which simply relies on the default QUIC congestion control
   mechanisms, it defines a set of requirements around QUIC
   implementation's congestion controller to permit the use of separate
   control algorithms.

4.3.  RUSH - Reliable (unreliable) streaming protocol

   [I-D.draft-kpugin-rush]

   Whilst RUSH predates the datagram specification, it uses its own
   frame types on top of QUIC to take advantage of QUIC implementations
   reassembling messages greater than MTU.  In addition individual media
   frames are given their own stream identifiers to remove HoL blocking
   from processing out-of-order.

   It defines its own registry for signalling codec information with
   room for future expansion but presently is limited to a subset of
   popular video and audio codecs and doesn't include other types (such
   as subtitles, transcriptions, or other signalling information) out of
   bitstream.

4.4.  Tunnelling SRT over QUIC

   [I-D.draft-sharabayko-srt-over-quic]

   Secure Reliable Transport (SRT) ([I-D.draft-sharabayko-srt]) itself
   is a general purpose transport protocol primarily for contribution
   transport use cases and this specification covers the encapsulation
   and delivery of SRT on top of QUIC using datagram frame types.  This
   specification sets some requirements regarding how the two interact
   and leaves considerations for congestion control and pacing to
   prevent conflict between the two protocols.  Apart from that, SRT
   provides a native suport for stream multiplexing, thus contributing
   this missing functionality to QUIC datagrams.

4.5.  Warp - Segmented Live Video Transport

   [I-D.draft-lcurley-warp]

   Warp's specification attemps to map Group of Picture encoding of
   video on top of QUIC streams.  It depends on ISOBMFF containers to
   encapsulate both media as well as messaging, and defines
   prioritisation with separate considerations for audio and video.  It
   doesn't yet define bi-directionality of media flows, and can be run
   over protocols like WebTransport [I-D.draft-ietf-webtrans-overview].

4.6.  Comparison of Existing Specifications

   *  Both QRT and the Engelbart draft attempt to use existing payloads
      of RTP, RTCP, and SDP, unlike RUSH and SRT, as well as using
      existing Datagram frames
   *  All drafts take differing approaches to flow/stream identification
      and management; some address congestion control and others just
      omit the subject and leave it to QUIC to handle
   *  Both QRT and RUSH specify ALPN identification; the Engelbart,
      Warp, and SRT drafts do not.

4.7.  Moving Beyond "RTP over QUIC".

   It's worth noting that work on "RTP over QUIC" is being considered in
   the AVTCORE working group at this time, although no proposals have
   been adopted by the working group.

   Although some of the use cases described in Section 5 came out of
   "RTP over QUIC" proposals, they are worth considering for MOQ, and
   may be especially relevant to MOQ, depending on whether "RTP over
   QUIC' requires major changes to RTP and RTCP, in order to meet the
   requirements arising out of those use cases.

5.  Use Cases Informing This Proposal

   Our goal in this section is to understand the range of use cases that
   have been proposed for "Media Over QUIC".

   An early draft in the "media over QUIC" space,
   [I-D.draft-rtpfolks-quic-rtp-over-quic], defined several key use
   cases.  Some of the following use cases have been inspired by that
   document, and others have come from discussions with the wider MOQ
   community (among other places, a side meeting at IETF 112).

   For each use case in this section, we also define

   *  the number of senders or receiver in a given session transmitting
      distinct streams,
   *  whether a session has bi-direction flows of media from senders and
      receivers, and
   *  the expected lowest latency requirements using the definitions
      specified in Section 2.

   It is likely that we should add other characteristics, as we come to
   understand them.

5.1.  Video Conferencing

   *Senders/Receivers*: Many to Many *Bi-directional*: Yes *Latency*:
   Ultra-Low

   Where media is both sent and received; This may include audio from
   both microphone(s) or other inputs, or may include "screen sharing"
   or inclusion of other content such as slide, document, or video
   presentation.  This may be done as client/server, or peer to peer
   with a many to many relationship of both senders and receivers.

5.2.  Gaming

   *Senders/Receivers*: One to One *Bi-directional*: Yes *Latency*:
   Ull100

   Where media is received, and user inputs are sent by the client.
   This may also include the client receiving other types of signalling,
   such as triggers for haptic feedback.  This may also carry media from
   the client such as microphone audio for in-game chat with other
   players.

5.3.  Remote Desktop

   *Senders/Receivers*: One to One *Bi-directional*: Yes *Latency*:
   Ultra-Low

   Where media is received, and user inputs are sent by the client.
   Latency requirements with this usecase are marginally different than
   the gaming use case.  This may also include signalling and/or
   transmitting of files or devices connected to the user's computer.

5.4.  Live Media Streaming

   *Senders/Receivers*: One to Many *Bi-directional*: No *Latency*: Low
   to Non-Low

   Where media is received from a live broadcast or stream.  This may
   comprise of multiple audio or video outputs with different codecs or
   bitrates.  This may also include other types of media essence such as
   subtitles or timing signalling information (e.g. markers to indicate
   change of behaviour in client such as advertisement breaks).  The use
   of "live rewind" where a window of media behind the live edge can be
   made available for clients to playback, either because the local
   player falls behind edge or because the viewer wishes to play back
   from a point in the past.

5.5.  Live Media Contribution

   *Senders/Receivers*: One to One *Bi-directional*: No *Latency*:
   Ultra-Low to Low

   Where media is received from a source for onwards handling into a
   distribution platform.  The media may comprise of multiple audio and/
   or video sources.  Bitrates may either be static or set dynamically
   by signalling of connection inforation (bandwidth, latency) based on
   data sent by the receiver.

5.6.  Live Media Syndication

   *Senders/Receivers*: One to One *Bi-directional*: No *Latency*:
   Ultra-Low to Low

   Where media is sent onwards to another platform for further
   distribution.  The media may be compressed down to a bitrate lower
   than source, but larger than final distribution output.  Streams may
   be redundant with failover mechanisms in place.

5.7.  On-Demand Media Streaming

   *Senders/Receivers*: One to Many *Bi-directional*: No *Latency*: On
   Demand

   Where media is received from a non-live, typically pre-recorded
   source.  This may feature additional outputs, bitrates, codecs, and
   media types described in the live media streaming use case.

6.  Proposed Scope for "Media Over QUIC"

   Our proposal is that "Media Over QUIC" discussions focus first on the
   use cases for Live Media Contribution (Section 5.5), Syndication
   (Section 5.6), and Streaming (Section 5.4).  Our reasoning is
   provided in Section 6.1.

6.1.  Use Case Analysis

   Each of the above use cases in Section 5 fit into one of three
   classifications of solutions.

   The first group, covering gaming (Section 5.2), screen sharing
   (Section 5.3), and general video conferencing (Section 5.1), are
   largely covered by WebRTC and related protocols today.  Whilst there
   may be benefit in these use cases having a QUIC based protocol it may
   be more appropriate given the size of existing deployments to extend
   the WebRTC protocol and specifications.  Such work could start in a
   QUIC specific forum, but would likely need to take place in [rtcweb]
   and the W3C.

   The second group of classifications, covering Live Media Contribution
   (Section 5.5), Syndication (Section 5.6), and Streaming (Section 5.4)
   are likely the use cases likely to benefit most from this work.
   Existing protocols used such as HLS [RFC8216] and DASH [DASH] are
   reaching limits towards how low they can reduce latency in live
   streaming and for scenarios where low-bitrate audio streams are used
   add a significant amount of overheads compared to the media
   bitstream.

   On-Demand media streaming (Section 5.7) is unlikely to benefit from
   work in this space.  Without notable latency requirements, protocols
   such as HLS and DASH largely meet the needs of this use case.

7.  Requirements

   **Note: This section was written to reflect an early focus on "Media
   over RTP over QUIC", and will be revisited when we agree on the use
   cases in Section 5 that will be in scope for further work.

   Even a cursory examination of the existing proposals listed in
   Section 4 shows that there are fundamental differences in the
   approaches being used.

7.1.  Codec Agility

   When initiating a media session, both the sender and receiver should
   be able to negotiate the codecs, bitrates, resolution, and other
   media details based on capabilities and preferences.  This must be
   negotiable both before commencing playback but also during as a
   result of changes to device output or network conditions (such as
   reduction in available network bandwidth).  It may be prefered to use
   existing ecosystem for such purposes, e.g.  SDP [RFC4566].

7.2.  Support a range of Latencies

   Support for a nominal latency appropriate for the use cases that are
   in scope should be achieved, with consideration for the minimum
   buffer that a receiver playing content may need to handle congestion,
   packet loss, and other degradation in network quality.

7.3.  Migration of Sessions

   Handling of migration of a session between hosts, either of sender or
   receiver should be supported.  This may either happen because the
   sender is undergoing maintenence or a rebalancing of resource,
   because the either is experiencing a change in network connectivity
   (such as a device moving from WiFi to cellular connectivity) or other
   reasons.

   This may depend on QUIC capabilities such as
   [I-D.draft-ietf-quic-multipath] but is by no means a hard
   requirement.

7.4.  Congestion Control

   TODO: Confirm these requirements, consider looking at how RFC 8836
   applies to this requirement.

7.5.  Support Lossless and Lossy Media Transport

   TODO: confirm scope of this draft to describe lossless media
   transport, lossy media transport, or both lossless and lossy
   transport.

7.6.  Flow Directionality

   Media should be able to flow in either direction from client to
   server or vice-versa, either individually or concurrently but should
   only be negotiated at the start of the session.

7.7.  WebTransport

   TODO: Unsure if this should be a requirement.  If it is, we have to
   consider two things: WebTransport supports HTTP/2, are we going to
   explicitly exclude it?  Also, WebTransport
   [I-D.draft-ietf-webtrans-overview] has normative language around
   congestion control which may be at odds with our potential
   requirements.

7.8.  Authentication

   The encapsulation SHOULD have capabilities beyond what QUIC provides
   to allow hosts to authenticate one another, this should be kept
   simple but robust in nature to prevent attacks like credential brute-
   forcing.

   TODO: More details are required here

8.  Non-requirements

   This section covers topics that are explicitly out of scope for the
   time being.

8.1.  NAT Traversal

   From Section 8.2 of [RFC9000]:

      Path validation is not designed as a NAT traversal mechanism.
      Though the mechanism described here might be effective for the
      creation of NAT bindings that support NAT traversal, the
      expectation is that one endpoint is able to receive packets
      without first having sent a packet on that path.  Effective NAT
      traversal needs additional synchronization mechanisms that are not
      provided here.

   Although there are use cases that would benefit from a mechanism for
   NAT traversal, a QUIC protocol extention would be required to support
   those use cases today.

8.2.  Multicast

   Even if multicast and other network broadcasting capabilities are
   often used in delivering media in our use cases, QUIC doesn't yet
   support multicast, and would require a QUIC protocol extension to do
   so.  In addition, the inclusion of multicast would introduce more
   complexity in both the specification and client implimentations.  On
   the other hand, UDP multicast may be considered as the last mile
   delivery transport outside of QUIC transport, thus it would be
   beneficial for a protocol to provide such an opportunity (e.g.  RTP/
   QUIC -> RTP/UDP).

9.  IANA Considerations

   This document makes no requests of IANA.

10.  Security Considerations

   As this document is intended to guide discussion and consensus, it
   introduces no security considerations of its own.

11.  References

11.1.  Normative References

   [I-D.draft-ietf-mops-streaming-opcons]
              Holland, J., Begen, A., and S. Dawkins, "Operational
              Considerations for Streaming Media", Work in Progress,
              Internet-Draft, draft-ietf-mops-streaming-opcons-09, 1
              March 2022, <https://datatracker.ietf.org/doc/html/draft-
              ietf-mops-streaming-opcons-09>.

   [I-D.draft-ietf-quic-datagram]
              Pauly, T., Kinnear, E., and D. Schinazi, "An Unreliable
              Datagram Extension to QUIC", Work in Progress, Internet-
              Draft, draft-ietf-quic-datagram-10, 4 February 2022,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              datagram-10>.

   [I-D.draft-ietf-webtrans-overview]
              Vasiliev, V., "The WebTransport Protocol Framework", Work
              in Progress, Internet-Draft, draft-ietf-webtrans-overview-
              02, 28 July 2021, <https://datatracker.ietf.org/doc/html/
              draft-ietf-webtrans-overview-02>.

   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, "SDP: Session
              Description Protocol", RFC 4566, DOI 10.17487/RFC4566,
              July 2006, <https://www.rfc-editor.org/rfc/rfc4566>.

   [RFC9000]  Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

11.2.  Informative References

   [AVTCORE-2022-02]
              "AVTCORE 2022-02 interim meeting materials", February
              2022, <https://datatracker.ietf.org/meeting/interim-2022-
              avtcore-01/session/avtcore>.

   [DASH]     "ISO/IEC 23009-1:2019: Dynamic adaptive streaming over
              HTTP (DASH) -- Part 1: Media presentation description and
              segment formats (2nd edition)", n.d.,
              <https://www.iso.org/standard/79329.html>.

   [I-D.draft-engelbart-rtp-over-quic]
              Ott, J. and M. Engelbart, "RTP over QUIC", Work in
              Progress, Internet-Draft, draft-engelbart-rtp-over-quic-
              01, 25 October 2021,
              <https://datatracker.ietf.org/doc/html/draft-engelbart-
              rtp-over-quic-01>.

   [I-D.draft-hurst-quic-rtp-tunnelling]
              Hurst, S., "QRT: QUIC RTP Tunnelling", Work in Progress,
              Internet-Draft, draft-hurst-quic-rtp-tunnelling-01, 28
              January 2021, <https://datatracker.ietf.org/doc/html/
              draft-hurst-quic-rtp-tunnelling-01>.

   [I-D.draft-ietf-quic-http]
              Bishop, M., "Hypertext Transfer Protocol Version 3
              (HTTP/3)", Work in Progress, Internet-Draft, draft-ietf-
              quic-http-34, 2 February 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              http-34>.

   [I-D.draft-ietf-quic-multipath]
              Liu, Y., Ma, Y., Coninck, Q. D., Bonaventure, O., Huitema,
              C., and M. Kuehlewind, "Multipath Extension for QUIC",
              Work in Progress, Internet-Draft, draft-ietf-quic-
              multipath-00, 2 February 2022,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              multipath-00>.

   [I-D.draft-kpugin-rush]
              Pugin, K., Frindell, A., Cenzano, J., and J. Weissman,
              "RUSH - Reliable (unreliable) streaming protocol", Work in
              Progress, Internet-Draft, draft-kpugin-rush-00, 12 July
              2021, <https://datatracker.ietf.org/doc/html/draft-kpugin-
              rush-00>.

   [I-D.draft-lcurley-warp]
              Curley, L., "Warp - Segmented Live Video Transport", Work
              in Progress, Internet-Draft, draft-lcurley-warp-00, 9
              February 2022, <https://datatracker.ietf.org/doc/html/
              draft-lcurley-warp-00>.

   [I-D.draft-rtpfolks-quic-rtp-over-quic]
              Ott, J., Even, R., Perkins, C., and V. Singh, "RTP over
              QUIC", Work in Progress, Internet-Draft, draft-rtpfolks-
              quic-rtp-over-quic-01, 1 September 2017,
              <https://datatracker.ietf.org/doc/html/draft-rtpfolks-
              quic-rtp-over-quic-01>.

   [I-D.draft-sharabayko-srt]
              Sharabayko, M., Sharabayko, M., Dube, J., Kim, J., and J.
              Kim, "The SRT Protocol", Work in Progress, Internet-Draft,
              draft-sharabayko-srt-01, 7 September 2021,
              <https://datatracker.ietf.org/doc/html/draft-sharabayko-
              srt-01>.

   [I-D.draft-sharabayko-srt-over-quic]
              Sharabayko, M. and M. Sharabayko, "Tunnelling SRT over
              QUIC", Work in Progress, Internet-Draft, draft-sharabayko-
              srt-over-quic-00, 28 July 2021,
              <https://datatracker.ietf.org/doc/html/draft-sharabayko-
              srt-over-quic-00>.

   [MOQ-ml]   "Moq -- Media over QUIC", n.d.,
              <https://www.ietf.org/mailman/listinfo/moq>.

   [QUIC-goals]
              "Initial Charter for QUIC Working Group", October 2016,
              <https://datatracker.ietf.org/doc/charter-ietf-quic/01/>.

   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.
              Jacobson, "RTP: A Transport Protocol for Real-Time
              Applications", STD 64, RFC 3550, DOI 10.17487/RFC3550,
              July 2003, <https://www.rfc-editor.org/rfc/rfc3550>.

   [RFC8216]  Pantos, R., Ed. and W. May, "HTTP Live Streaming",
              RFC 8216, DOI 10.17487/RFC8216, August 2017,
              <https://www.rfc-editor.org/rfc/rfc8216>.

   [rtcweb]   "Real-Time Communication in WEB-browsers (rtcweb) IETF
              Working Group", n.d.,
              <https://datatracker.ietf.org/wg/rtcweb/about/>.

Appendix A.  Acknowledgements

   The authors would like the thank the many authors of of the
   specifications referenced in Section 4 for their work:

   *  Alan Frindell
   *  Colin Perkins
   *  Jake Weissman
   *  Joerg Ott
   *  Jordi Cenzano
   *  Kirill Pugin
   *  Maria Sharabayko
   *  Mathis Engelbart
   *  Maxim Sharabayko
   *  Roni Even
   *  Sam Hurst
   *  Varun Singh

   The authors would like to thank Alan Frindell, Luke Curley, and Maxim
   Sharabayko for text contributions to this draft.

   James Gruessing would also like to thank Francesco Illy and Nicholas
   Book for their part in providing the needed motivation.

Authors' Addresses

   James Gruessing
   Nederlandse Publieke Omroep
   Netherlands
   Email: james.ietf@gmail.com


   Spencer Dawkins
   Tencent America LLC
   United States of America
   Email: spencerdawkins.ietf@gmail.com
